/*
 * generated by Xtext 2.22.0
 */
package org.gemoc.miniexpr.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MiniExprGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.Model");
		private final Assignment cExpressionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_0 = (RuleCall)cExpressionsAssignment.eContents().get(0);
		
		//Model:
		//	expressions+=Expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//expressions+=Expression*
		public Assignment getExpressionsAssignment() { return cExpressionsAssignment; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_0() { return cExpressionsExpressionParserRuleCall_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.Expression");
		private final RuleCall cContractedIfParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	ContractedIf;
		@Override public ParserRule getRule() { return rule; }
		
		//ContractedIf
		public RuleCall getContractedIfParserRuleCall() { return cContractedIfParserRuleCall; }
	}
	public class ContractedIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.ContractedIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cContractedIfConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cThenAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cThenOrParserRuleCall_1_2_0 = (RuleCall)cThenAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cElseAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cElseOrParserRuleCall_1_4_0 = (RuleCall)cElseAssignment_1_4.eContents().get(0);
		
		//ContractedIf Expression:
		//	Or ({ContractedIf.condition=current} '?' then=Or ':' else=Or)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Or ({ContractedIf.condition=current} '?' then=Or ':' else=Or)*
		public Group getGroup() { return cGroup; }
		
		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }
		
		//({ContractedIf.condition=current} '?' then=Or ':' else=Or)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ContractedIf.condition=current}
		public Action getContractedIfConditionAction_1_0() { return cContractedIfConditionAction_1_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
		
		//then=Or
		public Assignment getThenAssignment_1_2() { return cThenAssignment_1_2; }
		
		//Or
		public RuleCall getThenOrParserRuleCall_1_2_0() { return cThenOrParserRuleCall_1_2_0; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//else=Or
		public Assignment getElseAssignment_1_4() { return cElseAssignment_1_4; }
		
		//Or
		public RuleCall getElseOrParserRuleCall_1_4_0() { return cElseOrParserRuleCall_1_4_0; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	And ({Or.left=current} op='||' right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} op='||' right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} op='||' right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//op='||'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	Equality ({And.left=current} op='&&' right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} op='&&' right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} op='&&' right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//op='&&'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0() { return cOpAmpersandAmpersandKeyword_1_1_0; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality Expression:
		//	Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=('==' | '!=') right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=('==' | '!=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('==' | '!=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expression:
		//	PlusOrMinus ({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusOrMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=('>=' | '<=' | '>' | '<')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('>=' | '<=' | '>' | '<')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpPlusSignKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Keyword cOpHyphenMinusKeyword_1_0_1_1_0 = (Keyword)cOpAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus Expression:
		//	MulOrDiv (({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} op='+' | {Minus.left=current} op='-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} op='+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//op='+'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0_1_0() { return cOpPlusSignKeyword_1_0_0_1_0; }
		
		//{Minus.left=current} op='-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//op='-'
		public Assignment getOpAssignment_1_0_1_1() { return cOpAssignment_1_0_1_1; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_1_1_0() { return cOpHyphenMinusKeyword_1_0_1_1_0; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModuloParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMulLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpAsteriskKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Keyword cOpSolidusKeyword_1_0_1_1_0 = (Keyword)cOpAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightModuloParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MulOrDiv Expression:
		//	Modulo (({Mul.left=current} op='*' | {Div.Left=current} op='/') right=Modulo)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Modulo (({Mul.left=current} op='*' | {Div.Left=current} op='/') right=Modulo)*
		public Group getGroup() { return cGroup; }
		
		//Modulo
		public RuleCall getModuloParserRuleCall_0() { return cModuloParserRuleCall_0; }
		
		//(({Mul.left=current} op='*' | {Div.Left=current} op='/') right=Modulo)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Mul.left=current} op='*' | {Div.Left=current} op='/')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Mul.left=current} op='*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Mul.left=current}
		public Action getMulLeftAction_1_0_0_0() { return cMulLeftAction_1_0_0_0; }
		
		//op='*'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_0_0_1_0() { return cOpAsteriskKeyword_1_0_0_1_0; }
		
		//{Div.Left=current} op='/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.Left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//op='/'
		public Assignment getOpAssignment_1_0_1_1() { return cOpAssignment_1_0_1_1; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_0_1_1_0() { return cOpSolidusKeyword_1_0_1_1_0; }
		
		//right=Modulo
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Modulo
		public RuleCall getRightModuloParserRuleCall_1_1_0() { return cRightModuloParserRuleCall_1_1_0; }
	}
	public class ModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.Modulo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cModuloLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Modulo Expression:
		//	Primary ({Modulo.left=current} op='%' right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Modulo.left=current} op='%' right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Modulo.left=current} op='%' right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Modulo.left=current}
		public Action getModuloLeftAction_1_0() { return cModuloLeftAction_1_0; }
		
		//op='%'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'%'
		public Keyword getOpPercentSignKeyword_1_1_0() { return cOpPercentSignKeyword_1_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cParenthesisAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryMinusAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNotAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primary Expression:
		//	{Parenthesis} '(' expression=Expression ')' | {UnaryMinus} '-' expression=Primary | {Not} '!' expression=Primary |
		//	Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parenthesis} '(' expression=Expression ')' | {UnaryMinus} '-' expression=Primary | {Not} '!' expression=Primary |
		//Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Parenthesis} '(' expression=Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Parenthesis}
		public Action getParenthesisAction_0_0() { return cParenthesisAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_2_0() { return cExpressionExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{UnaryMinus} '-' expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryMinus}
		public Action getUnaryMinusAction_1_0() { return cUnaryMinusAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//{Not} '!' expression=Primary
		public Group getGroup_2() { return cGroup_2; }
		
		//{Not}
		public Action getNotAction_2_0() { return cNotAction_2_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2_1() { return cExclamationMarkKeyword_2_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_2_2_0() { return cExpressionPrimaryParserRuleCall_2_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_3() { return cAtomicParserRuleCall_3; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumberConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueNUMBERTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBoolConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_1_0_0 = (Keyword)cValueAssignment_1_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cVectorConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValuesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValuesExpressionParserRuleCall_2_2_0 = (RuleCall)cValuesAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cValuesAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cValuesExpressionParserRuleCall_2_3_1_0 = (RuleCall)cValuesAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final RuleCall cRefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cArraySizeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Atomic Expression:
		//	{NumberConstant} value=NUMBER | {BoolConstant} (value?='true' | 'false') | {VectorConstant} '[' values+=Expression
		//	(',' values+=Expression)* ']' | Ref | ArraySize;
		@Override public ParserRule getRule() { return rule; }
		
		//{NumberConstant} value=NUMBER | {BoolConstant} (value?='true' | 'false') | {VectorConstant} '[' values+=Expression (','
		//values+=Expression)* ']' | Ref | ArraySize
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NumberConstant} value=NUMBER
		public Group getGroup_0() { return cGroup_0; }
		
		//{NumberConstant}
		public Action getNumberConstantAction_0_0() { return cNumberConstantAction_0_0; }
		
		//value=NUMBER
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//NUMBER
		public RuleCall getValueNUMBERTerminalRuleCall_0_1_0() { return cValueNUMBERTerminalRuleCall_0_1_0; }
		
		//{BoolConstant} (value?='true' | 'false')
		public Group getGroup_1() { return cGroup_1; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_1_0() { return cBoolConstantAction_1_0; }
		
		//(value?='true' | 'false')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//value?='true'
		public Assignment getValueAssignment_1_1_0() { return cValueAssignment_1_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_1_0_0() { return cValueTrueKeyword_1_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1_1() { return cFalseKeyword_1_1_1; }
		
		//{VectorConstant} '[' values+=Expression (',' values+=Expression)* ']'
		public Group getGroup_2() { return cGroup_2; }
		
		//{VectorConstant}
		public Action getVectorConstantAction_2_0() { return cVectorConstantAction_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//values+=Expression
		public Assignment getValuesAssignment_2_2() { return cValuesAssignment_2_2; }
		
		//Expression
		public RuleCall getValuesExpressionParserRuleCall_2_2_0() { return cValuesExpressionParserRuleCall_2_2_0; }
		
		//(',' values+=Expression)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//','
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//values+=Expression
		public Assignment getValuesAssignment_2_3_1() { return cValuesAssignment_2_3_1; }
		
		//Expression
		public RuleCall getValuesExpressionParserRuleCall_2_3_1_0() { return cValuesExpressionParserRuleCall_2_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//Ref
		public RuleCall getRefParserRuleCall_3() { return cRefParserRuleCall_3; }
		
		//ArraySize
		public RuleCall getArraySizeParserRuleCall_4() { return cArraySizeParserRuleCall_4; }
	}
	public class RefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.Ref");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleVarRefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cArrayRefArrayAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cIndicesAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cIndicesExpressionParserRuleCall_1_0_2_0 = (RuleCall)cIndicesAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cCommaKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cIndicesAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cIndicesExpressionParserRuleCall_1_0_3_1_0 = (RuleCall)cIndicesAssignment_1_0_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cPropertyRefObjectAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cPropertyAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cPropertyIDTerminalRuleCall_1_1_2_0 = (RuleCall)cPropertyAssignment_1_1_2.eContents().get(0);
		
		//Ref:
		//	SimpleVarRef ({ArrayRef.array=current} '[' indices+=Expression (',' indices+=Expression)* ']' |
		//	{PropertyRef.object=current} '.' property=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleVarRef ({ArrayRef.array=current} '[' indices+=Expression (',' indices+=Expression)* ']' |
		//{PropertyRef.object=current} '.' property=ID)*
		public Group getGroup() { return cGroup; }
		
		//SimpleVarRef
		public RuleCall getSimpleVarRefParserRuleCall_0() { return cSimpleVarRefParserRuleCall_0; }
		
		//({ArrayRef.array=current} '[' indices+=Expression (',' indices+=Expression)* ']' | {PropertyRef.object=current} '.'
		//property=ID)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{ArrayRef.array=current} '[' indices+=Expression (',' indices+=Expression)* ']'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ArrayRef.array=current}
		public Action getArrayRefArrayAction_1_0_0() { return cArrayRefArrayAction_1_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_1() { return cLeftSquareBracketKeyword_1_0_1; }
		
		//indices+=Expression
		public Assignment getIndicesAssignment_1_0_2() { return cIndicesAssignment_1_0_2; }
		
		//Expression
		public RuleCall getIndicesExpressionParserRuleCall_1_0_2_0() { return cIndicesExpressionParserRuleCall_1_0_2_0; }
		
		//(',' indices+=Expression)*
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//','
		public Keyword getCommaKeyword_1_0_3_0() { return cCommaKeyword_1_0_3_0; }
		
		//indices+=Expression
		public Assignment getIndicesAssignment_1_0_3_1() { return cIndicesAssignment_1_0_3_1; }
		
		//Expression
		public RuleCall getIndicesExpressionParserRuleCall_1_0_3_1_0() { return cIndicesExpressionParserRuleCall_1_0_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_4() { return cRightSquareBracketKeyword_1_0_4; }
		
		//{PropertyRef.object=current} '.' property=ID
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{PropertyRef.object=current}
		public Action getPropertyRefObjectAction_1_1_0() { return cPropertyRefObjectAction_1_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }
		
		//property=ID
		public Assignment getPropertyAssignment_1_1_2() { return cPropertyAssignment_1_1_2; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_1_1_2_0() { return cPropertyIDTerminalRuleCall_1_1_2_0; }
	}
	public class SimpleVarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.SimpleVarRef");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTargetIDTerminalRuleCall_0 = (RuleCall)cTargetAssignment.eContents().get(0);
		
		//SimpleVarRef:
		//	target=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//target=ID
		public Assignment getTargetAssignment() { return cTargetAssignment; }
		
		//ID
		public RuleCall getTargetIDTerminalRuleCall_0() { return cTargetIDTerminalRuleCall_0; }
	}
	public class ArraySizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.ArraySize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayRefParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArraySize:
		//	'|' array=Ref '|';
		@Override public ParserRule getRule() { return rule; }
		
		//'|' array=Ref '|'
		public Group getGroup() { return cGroup; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//array=Ref
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//Ref
		public RuleCall getArrayRefParserRuleCall_1_0() { return cArrayRefParserRuleCall_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final ExpressionElements pExpression;
	private final ContractedIfElements pContractedIf;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final ModuloElements pModulo;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final RefElements pRef;
	private final SimpleVarRefElements pSimpleVarRef;
	private final ArraySizeElements pArraySize;
	private final TerminalRule tNUMBER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MiniExprGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pExpression = new ExpressionElements();
		this.pContractedIf = new ContractedIfElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pModulo = new ModuloElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pRef = new RefElements();
		this.pSimpleVarRef = new SimpleVarRefElements();
		this.pArraySize = new ArraySizeElements();
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.miniexpr.MiniExpr.NUMBER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.miniexpr.MiniExpr".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	expressions+=Expression*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Expression:
	//	ContractedIf;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ContractedIf Expression:
	//	Or ({ContractedIf.condition=current} '?' then=Or ':' else=Or)*;
	public ContractedIfElements getContractedIfAccess() {
		return pContractedIf;
	}
	
	public ParserRule getContractedIfRule() {
		return getContractedIfAccess().getRule();
	}
	
	//Or Expression:
	//	And ({Or.left=current} op='||' right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	Equality ({And.left=current} op='&&' right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality Expression:
	//	Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison Expression:
	//	PlusOrMinus ({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusOrMinus)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Expression:
	//	MulOrDiv (({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Expression:
	//	Modulo (({Mul.left=current} op='*' | {Div.Left=current} op='/') right=Modulo)*;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Modulo Expression:
	//	Primary ({Modulo.left=current} op='%' right=Primary)*;
	public ModuloElements getModuloAccess() {
		return pModulo;
	}
	
	public ParserRule getModuloRule() {
		return getModuloAccess().getRule();
	}
	
	//Primary Expression:
	//	{Parenthesis} '(' expression=Expression ')' | {UnaryMinus} '-' expression=Primary | {Not} '!' expression=Primary |
	//	Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic Expression:
	//	{NumberConstant} value=NUMBER | {BoolConstant} (value?='true' | 'false') | {VectorConstant} '[' values+=Expression
	//	(',' values+=Expression)* ']' | Ref | ArraySize;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//Ref:
	//	SimpleVarRef ({ArrayRef.array=current} '[' indices+=Expression (',' indices+=Expression)* ']' |
	//	{PropertyRef.object=current} '.' property=ID)*;
	public RefElements getRefAccess() {
		return pRef;
	}
	
	public ParserRule getRefRule() {
		return getRefAccess().getRule();
	}
	
	//SimpleVarRef:
	//	target=ID;
	public SimpleVarRefElements getSimpleVarRefAccess() {
		return pSimpleVarRef;
	}
	
	public ParserRule getSimpleVarRefRule() {
		return getSimpleVarRefAccess().getRule();
	}
	
	//ArraySize:
	//	'|' array=Ref '|';
	public ArraySizeElements getArraySizeAccess() {
		return pArraySize;
	}
	
	public ParserRule getArraySizeRule() {
		return getArraySizeAccess().getRule();
	}
	
	//terminal NUMBER:
	//	INT ('.' INT?)?;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
