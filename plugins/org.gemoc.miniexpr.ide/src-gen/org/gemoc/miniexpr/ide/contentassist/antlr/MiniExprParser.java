/*
 * generated by Xtext 2.22.0
 */
package org.gemoc.miniexpr.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.gemoc.miniexpr.ide.contentassist.antlr.internal.InternalMiniExprParser;
import org.gemoc.miniexpr.services.MiniExprGrammarAccess;

public class MiniExprParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MiniExprGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MiniExprGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0(), "rule__Equality__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0(), "rule__Comparison__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getPlusOrMinusAccess().getAlternatives_1_0(), "rule__PlusOrMinus__Alternatives_1_0");
			builder.put(grammarAccess.getMulOrDivAccess().getAlternatives_1_0(), "rule__MulOrDiv__Alternatives_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
			builder.put(grammarAccess.getAtomicAccess().getAlternatives_1_1(), "rule__Atomic__Alternatives_1_1");
			builder.put(grammarAccess.getRefAccess().getAlternatives_1(), "rule__Ref__Alternatives_1");
			builder.put(grammarAccess.getContractedIfAccess().getGroup(), "rule__ContractedIf__Group__0");
			builder.put(grammarAccess.getContractedIfAccess().getGroup_1(), "rule__ContractedIf__Group_1__0");
			builder.put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
			builder.put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
			builder.put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
			builder.put(grammarAccess.getPlusOrMinusAccess().getGroup(), "rule__PlusOrMinus__Group__0");
			builder.put(grammarAccess.getPlusOrMinusAccess().getGroup_1(), "rule__PlusOrMinus__Group_1__0");
			builder.put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_0(), "rule__PlusOrMinus__Group_1_0_0__0");
			builder.put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_1(), "rule__PlusOrMinus__Group_1_0_1__0");
			builder.put(grammarAccess.getMulOrDivAccess().getGroup(), "rule__MulOrDiv__Group__0");
			builder.put(grammarAccess.getMulOrDivAccess().getGroup_1(), "rule__MulOrDiv__Group_1__0");
			builder.put(grammarAccess.getMulOrDivAccess().getGroup_1_0_0(), "rule__MulOrDiv__Group_1_0_0__0");
			builder.put(grammarAccess.getMulOrDivAccess().getGroup_1_0_1(), "rule__MulOrDiv__Group_1_0_1__0");
			builder.put(grammarAccess.getModuloAccess().getGroup(), "rule__Modulo__Group__0");
			builder.put(grammarAccess.getModuloAccess().getGroup_1(), "rule__Modulo__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_2_3(), "rule__Atomic__Group_2_3__0");
			builder.put(grammarAccess.getRefAccess().getGroup(), "rule__Ref__Group__0");
			builder.put(grammarAccess.getRefAccess().getGroup_1_0(), "rule__Ref__Group_1_0__0");
			builder.put(grammarAccess.getRefAccess().getGroup_1_0_3(), "rule__Ref__Group_1_0_3__0");
			builder.put(grammarAccess.getRefAccess().getGroup_1_1(), "rule__Ref__Group_1_1__0");
			builder.put(grammarAccess.getArraySizeAccess().getGroup(), "rule__ArraySize__Group__0");
			builder.put(grammarAccess.getModelAccess().getExpressionsAssignment(), "rule__Model__ExpressionsAssignment");
			builder.put(grammarAccess.getContractedIfAccess().getThenAssignment_1_2(), "rule__ContractedIf__ThenAssignment_1_2");
			builder.put(grammarAccess.getContractedIfAccess().getElseAssignment_1_4(), "rule__ContractedIf__ElseAssignment_1_4");
			builder.put(grammarAccess.getOrAccess().getOpAssignment_1_1(), "rule__Or__OpAssignment_1_1");
			builder.put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
			builder.put(grammarAccess.getAndAccess().getOpAssignment_1_1(), "rule__And__OpAssignment_1_1");
			builder.put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
			builder.put(grammarAccess.getEqualityAccess().getOpAssignment_1_1(), "rule__Equality__OpAssignment_1_1");
			builder.put(grammarAccess.getEqualityAccess().getRightAssignment_1_2(), "rule__Equality__RightAssignment_1_2");
			builder.put(grammarAccess.getComparisonAccess().getOpAssignment_1_1(), "rule__Comparison__OpAssignment_1_1");
			builder.put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
			builder.put(grammarAccess.getPlusOrMinusAccess().getOpAssignment_1_0_0_1(), "rule__PlusOrMinus__OpAssignment_1_0_0_1");
			builder.put(grammarAccess.getPlusOrMinusAccess().getOpAssignment_1_0_1_1(), "rule__PlusOrMinus__OpAssignment_1_0_1_1");
			builder.put(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1(), "rule__PlusOrMinus__RightAssignment_1_1");
			builder.put(grammarAccess.getMulOrDivAccess().getOpAssignment_1_0_0_1(), "rule__MulOrDiv__OpAssignment_1_0_0_1");
			builder.put(grammarAccess.getMulOrDivAccess().getOpAssignment_1_0_1_1(), "rule__MulOrDiv__OpAssignment_1_0_1_1");
			builder.put(grammarAccess.getMulOrDivAccess().getRightAssignment_1_1(), "rule__MulOrDiv__RightAssignment_1_1");
			builder.put(grammarAccess.getModuloAccess().getOpAssignment_1_1(), "rule__Modulo__OpAssignment_1_1");
			builder.put(grammarAccess.getModuloAccess().getRightAssignment_1_2(), "rule__Modulo__RightAssignment_1_2");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionAssignment_0_2(), "rule__Primary__ExpressionAssignment_0_2");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2(), "rule__Primary__ExpressionAssignment_1_2");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionAssignment_2_2(), "rule__Primary__ExpressionAssignment_2_2");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_1_1_0(), "rule__Atomic__ValueAssignment_1_1_0");
			builder.put(grammarAccess.getAtomicAccess().getValuesAssignment_2_2(), "rule__Atomic__ValuesAssignment_2_2");
			builder.put(grammarAccess.getAtomicAccess().getValuesAssignment_2_3_1(), "rule__Atomic__ValuesAssignment_2_3_1");
			builder.put(grammarAccess.getRefAccess().getIndicesAssignment_1_0_2(), "rule__Ref__IndicesAssignment_1_0_2");
			builder.put(grammarAccess.getRefAccess().getIndicesAssignment_1_0_3_1(), "rule__Ref__IndicesAssignment_1_0_3_1");
			builder.put(grammarAccess.getRefAccess().getPropertyAssignment_1_1_2(), "rule__Ref__PropertyAssignment_1_1_2");
			builder.put(grammarAccess.getSimpleVarRefAccess().getTargetAssignment(), "rule__SimpleVarRef__TargetAssignment");
			builder.put(grammarAccess.getArraySizeAccess().getArrayAssignment_1(), "rule__ArraySize__ArrayAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MiniExprGrammarAccess grammarAccess;

	@Override
	protected InternalMiniExprParser createParser() {
		InternalMiniExprParser result = new InternalMiniExprParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MiniExprGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MiniExprGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
